#!/usr/bin/env python3
import sys
import subprocess, os
import multiprocessing
import argparse
import time

def get_n_running_screens():
	result = subprocess.run(['screen', '-ls'], stdout=subprocess.PIPE)
	result = result.stdout.decode("UTF8").split()
	
	pattern_val = "Sockets"
	if result.count("Socket") >= 1:
		pattern_val = "Socket"
	
	n_screens_unprocessed = result[result.index(pattern_val) - 1]
	
	if n_screens_unprocessed == "No":
		ret = 0
	else:
		ret = int(n_screens_unprocessed)
	return ret
	
parser = argparse.ArgumentParser(description='Runs command in background screen when a computation core is available. Be careful: this command is blocking, meaning the remaining of the program it is called in will not run until a screen instance has been able to be be launched. Note: only the "command" argument is necessary.')
parser.add_argument("command", help="Command to be run in background screen.")
parser.add_argument("-n", "--name", help="Fancy name of the screen to create.")
parser.add_argument("-m", '--max_screens', type=int, help="Force number of maximum screens to be run in the same time. By default, the number of cores of the CPU is used.")
parser.add_argument("-t", '--wait_time', type=float, help="Force the time between two attempts of starting a screen instance (in seconds)")
parser.add_argument("-M", '--major', action="store_true", help="Adds 1 available slot to the default (or forced one, but then it is useless). This is useful if the command is run from a screen which is not supposed to be counted in the total number of screens (low impact on processor, only to manage other screens).")

parser.set_defaults(max_screens=multiprocessing.cpu_count(),wait_time=5.0,name="noname")
args = parser.parse_args()

# Managing maximum number of screens to run
max_instances = args.max_screens
if args.major is True:
	max_instances = max_instances + 1

# Attempts for running screen
socket_found = False
n_available_slots = max_instances - get_n_running_screens()
if n_available_slots > 0:
	#print("screen -dmS " + '"' + args.name + '"' + " sh -c " + '"' + args.command + '"')
	os.system("screen -dmS " + '"' + args.name + '"' + " sh -c " + '"' + args.command + '"')

else:
	while socket_found is not True:
		time.sleep(args.wait_time)	
		n_available_slots = max_instances - get_n_running_screens()
		if n_available_slots > 0:
			#print("screen -dmS " + '"' + args.name + '"' + " sh -c " + '"' + args.command + '"')
			os.system("screen -dmS " + '"' + args.name + '"' + " sh -c " + '"' + args.command + '"')
			socket_found = True


		
	
